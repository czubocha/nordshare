Transform: AWS::Serverless-2016-10-31

Parameters:
  DeployerRoleArn:
    Type: String

Globals:
  Function:
    Runtime: go1.x
    Timeout: 5
    Handler: handler
    AutoPublishAlias: live
    DeploymentPreference:
      Type: AllAtOnce
    Tracing: Active

Resources:

  Key:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Resource: '*'
          - Action: kms:CreateKey
            Effect: Allow
            Principal:
              AWS: !Ref DeployerRoleArn
            Resource: '*'
          - Action:
              - kms:EnableKey
              - kms:DisableKey
              - kms:EnableKeyRotation
              - kms:DisableKeyRotation
              - kms:PutKeyPolicy
              - kms:ScheduleKeyDeletion
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal:
              AWS: !Ref DeployerRoleArn
            Resource: '*'

  Saver:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../cmd/saver
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref Table
        - KMSEncryptPolicy:
            KeyId: !Ref Key
      Events:
        Api:
          Type: Api
          Properties:
            Method: post
            Path: /api/notes
            RestApiId: !Ref Api
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          KEY_ID: !Ref Key

  Reader:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../cmd/reader
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Table
        - KMSDecryptPolicy:
            KeyId: !Ref Key
      Events:
        Api:
          Type: Api
          Properties:
            Method: get
            Path: /api/notes/{id}
            RestApiId: !Ref Api
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          KEY_ID: !Ref Key

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: >-
          {"stage" : "$context.stage",
          "request_id" : "$context.requestId",
          "api_id" : "$context.apiId",
          "resource_path" : "$context.resourcePath",
          "resource_id" : "$context.resourceId",
          "http_method" : "$context.httpMethod",
          "source_ip" : "$context.identity.sourceIp",
          "user-agent" : "$context.identity.userAgent",
          "account_id" : "$context.identity.accountId",
          "api_key" : "$context.identity.apiKey",
          "caller" : "$context.identity.caller",
          "user" : "$context.identity.user",
          "user_arn" : "$context.identity.userArn"}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../api/openapi.yml
      OpenApiVersion: 3.0.3
      StageName: stage
      EndpointConfiguration: REGIONAL
      TracingEnabled: true

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-api-access-log
      RetentionInDays: 14

Outputs:
  ApiId:
    Value: !Ref Api
  ApiStage:
    Value: !Ref Api.Stage