Transform: AWS::Serverless-2016-10-31

Parameters:
  DeployerRoleArn:
    Type: String

Globals:
  Function:
    Runtime: go1.x
    Timeout: 10
    Handler: handler
    AutoPublishAlias: live
    DeploymentPreference:
      Type: Linear10PercentEvery1Minute
    Tracing: Active

Resources:

  ### KEY ###

  Key:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      EnableKeyRotation: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Resource: '*'
          - Action: kms:CreateKey
            Effect: Allow
            Principal:
              AWS: !Ref DeployerRoleArn
            Resource: '*'
          - Action:
              - kms:EnableKey
              - kms:DisableKey
              - kms:EnableKeyRotation
              - kms:DisableKeyRotation
              - kms:PutKeyPolicy
              - kms:ScheduleKeyDeletion
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal:
              AWS: !Ref DeployerRoleArn
            Resource: '*'

  ### LAMBDAS ###

  Saver:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../cmd/saver
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref Table
        - KMSEncryptPolicy:
            KeyId: !Ref Key
      Events:
        Api:
          Type: Api
          Properties:
            Method: post
            Path: /api/notes
            RestApiId: !Ref Api
      DeploymentPreference:
        Hooks:
          PreTraffic: !Ref E2E
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          KEY_ID: !Ref Key

  Reader:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../cmd/reader
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Table
        - KMSDecryptPolicy:
            KeyId: !Ref Key
      Events:
        Api:
          Type: Api
          Properties:
            Method: get
            Path: /api/notes/{id}
            RestApiId: !Ref Api
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          KEY_ID: !Ref Key

  Remover:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../cmd/remover
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Events:
        Api:
          Type: Api
          Properties:
            Method: delete
            Path: /api/notes/{id}
            RestApiId: !Ref Api
      Environment:
        Variables:
          TABLE_NAME: !Ref Table

  Modifier:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../cmd/modifier
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - KMSEncryptPolicy:
            KeyId: !Ref Key
      Events:
        Api:
          Type: Api
          Properties:
            Method: put
            Path: /api/notes/{id}
            RestApiId: !Ref Api
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
          KEY_ID: !Ref Key

  E2E:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub CodeDeployHook_${AWS::StackName}
      CodeUri: ../cmd/e2e
      Timeout: 30
      DeploymentPreference:
        Enabled: false
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref Table
        - Statement:
            - Effect: Allow
              Action: codedeploy:PutLifecycleEventHookExecutionStatus
              Resource: !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*
        - Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !Ref Saver.Version
                - !Ref Reader.Version
                - !Ref Modifier.Version
                - !Ref Remover.Version
      Environment:
        Variables:
          VERSION_SAVER: !Ref Saver.Version
          VERSION_READER: !Ref Reader.Version
          VERSION_MODIFIER: !Ref Modifier.Version
          VERSION_REMOVER: !Ref Remover.Version
          TABLE_NAME: !Ref Table

  ### DYNAMODB ###

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  ### API GATEWAY ###

  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: >-
          {"request_id" : "$context.requestId",
          "extended_request_id":"$context.extendedRequestId",
          "aws_endpoint_request_id": "$context.awsEndpointRequestId",
          "validation_error_string": "$context.error.validationErrorString",
          "error_message": "$context.error.message",
          "$context.error.responseType": "$context.error.responseType",
          "domain_name": "$context.domainName",
          "domain_prefix": "$context.domainPrefix",
          "resource_path" : "$context.resourcePath",
          "http_method" : "$context.httpMethod",
          "source_ip" : "$context.identity.sourceIp",
          "user-agent" : "$context.identity.userAgent",
          "protocol": "$context.protocol",
          "request_ime": "$context.requestTime",
          "xray_trace_id": "$context.xrayTraceId",
          "integration_latency": "$context.integrationLatency",
          "integration_status": "$context.integrationStatus",
          "response_latency": "$context.responseLatency",
          "response_length": "$context.responseLength",
          "status": "$context.status"}
      MethodSettings:
        - HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          ResourcePath: /*
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../api/openapi.yml
      OpenApiVersion: 3.0.3
      StageName: stage
      EndpointConfiguration: REGIONAL
      TracingEnabled: true

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

Outputs:
  ApiId:
    Value: !Ref Api
  ApiStage:
    Value: !Ref Api.Stage