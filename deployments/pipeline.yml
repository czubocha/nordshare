Transform: AWS::Serverless-2016-10-31

Parameters:
  AppName:
    Type: String
  FrontendBucketName:
    Type: String
  FrontendWebsiteURL:
    Type: String
  GitHubOwner:
    Type: String
  GitHubRepo:
    Type: String
  GitHubBranch:
    Type: String
  GitHubOauthToken:
    Type: String
  RefererSecret:
    Type: String

Resources:

  ArtifactStore:
    Type: AWS::S3::Bucket

  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOauthToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref Pipeline
      TargetAction: Source
      Name: PipelineGitHubWebhook
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOauthToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: BuildTest
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref Build
                EnvironmentVariables: !Sub '[{"name":"S3","value":"${ArtifactStore}"}]'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
            - Name: Test
              ActionTypeId:
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref Test
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
            - Name: BuildFrontend
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref BuildFrontend
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildFrontendArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployBackend
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub ${AppName}-backend
                RoleArn: !GetAtt DeployBackendRole.Arn
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: BuildArtifact::packaged.yml
                ParameterOverrides: !Sub |
                  {
                    "DeployerRoleArn": "${DeployBackendRole.Arn}"
                  }
                OutputFileName: stack-output.json
              InputArtifacts:
                - Name: BuildArtifact
              OutputArtifacts:
                - Name: BackendStackOutput
              RunOrder: 1
            - Name: DeployFrontend
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                BucketName: !Ref FrontendBucketName
                Extract: true
              InputArtifacts:
                - Name: BuildFrontendArtifact
              RunOrder: 1
            - Name: DeployCloudfront
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub ${AppName}-cloudfront
                RoleArn: !GetAtt DeployCloudfrontRole.Arn
                TemplatePath: SourceArtifact::deployments/cloudfront.yml
                ParameterOverrides: !Sub |
                  {
                    "ApiId": {"Fn::GetParam": ["BackendStackOutput", "stack-output.json", "ApiId"]},
                    "ApiStage": {"Fn::GetParam": ["BackendStackOutput", "stack-output.json", "ApiStage"]},
                    "FrontendWebsiteURL": "${FrontendWebsiteURL}",
                    "RefererSecret": "${RefererSecret}"
                  }
              InputArtifacts:
                - Name: BackendStackOutput
                - Name: SourceArtifact
              RunOrder: 2

  DeployBackendRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: cloudformation:DescribeStacks
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AppName}*
              - Action: cloudformation:CreateChangeSet
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::Partition}:transform/Serverless-2016-10-31
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::Partition}:transform/Include
              - Action:
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:GetRole
                  - iam:PassRole
                  - iam:ResourceTag*
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AppName}*
              - Action:
                  - iam:CreateServiceLinkedRole
                  - iam:DeleteServiceLinkedRole
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
              - Action:
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:ListTags
                  - lambda:TagResource
                  - lambda:UntagResource
                  - lambda:GetFunction
                  - lambda:ListVersionsByFunction
                  - lambda:PublishVersion
                  - lambda:CreateAlias
                  - lambda:UpdateAlias
                  - lambda:DeleteAlias
                  - lambda:GetAlias
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AppName}*
              - Action: s3:GetObject
                Effect: Allow
                Resource: !Sub ${ArtifactStore.Arn}/*
              - Action:
                  - codedeploy:CreateApplication
                  - codedeploy:DeleteApplication
                  - codedeploy:RegisterApplicationRevision
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${AppName}*
              - Action:
                  - codedeploy:CreateDeploymentGroup
                  - codedeploy:DeleteDeploymentGroup
                  - codedeploy:CreateDeployment
                  - codedeploy:DeleteDeployment
                  - codedeploy:GetDeployment
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${AppName}*
              - Action:
                  - codedeploy:GetDeploymentConfig
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*
              - Action: logs:DescribeLogGroups
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group::log-stream*
              - Action:
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:PutRetentionPolicy
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AppName}*
              - Action:
                  - apigateway:GET
                  - apigateway:POST
                  - apigateway:DELETE
                  - apigateway:PATCH
                  - apigateway:PUT
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis*
              - Action:
                  - dynamodb:CreateTable
                  - dynamodb:UpdateTable
                  - dynamodb:DeleteTable
                  - dynamodb:DescribeTable
                  - dynamodb:DescribeTimeToLive
                  - dynamodb:UpdateTimeToLive
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AppName}*
              - Action:
                  - kms:CreateKey
                Effect: Allow
                Resource: '*'
              - Action:
                  - kms:EnableKey
                  - kms:DisableKey
                  - kms:EnableKeyRotation
                  - kms:DisableKeyRotation
                  - kms:PutKeyPolicy
                  - kms:ScheduleKeyDeletion
                  - kms:TagResource
                  - kms:UntagResource
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*


  DeployCloudfrontRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - cloudfront:CreateDistribution
                  - cloudfront:UpdateDistribution
                  - cloudfront:DeleteDistribution
                  - cloudfront:TagResource
                  - cloudfront:UnTagResource
                  - cloudfront:GetDistribution
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution*
              - Action:
                  - cloudfront:CreateCloudFrontOriginAccessIdentity
                  - cloudfront:UpdateCloudFrontOriginAccessIdentity
                  - cloudfront:DeleteCloudFrontOriginAccessIdentity
                  - cloudfront:GetCloudFrontOriginAccessIdentityConfig
                Effect: Allow
                Resource: '*'
              - Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:PutLifecycleConfiguration
                  - s3:GetBucketAcl
                  - s3:PutBucketAcl
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:s3:::${AppName}*

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - iam:PassRole
                Effect: Allow
                Resource: '*'
              - Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Effect: Allow
                Resource:
                  - !GetAtt Build.Arn
                  - !GetAtt Test.Arn
                  - !GetAtt BuildFrontend.Arn
              - Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AppName}*
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:s3:::${AppName}*

  Build:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Location: !Sub ${ArtifactStore}/build-cache
        Type: S3
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
      TimeoutInMinutes: 10
      SourceVersion: !Ref GitHubBranch
      Source:
        BuildSpec: build/backend.yml
        Type: CODEPIPELINE
      ServiceRole: !GetAtt BuildRole.Arn

  Test:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Location: !Sub ${ArtifactStore}/test-cache
        Type: S3
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
      TimeoutInMinutes: 10
      SourceVersion: !Ref GitHubBranch
      Source:
        BuildSpec: build/test.yml
        Type: CODEPIPELINE
      ServiceRole: !GetAtt BuildRole.Arn

  BuildFrontend:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Location: !Sub ${ArtifactStore}/build-frontend-cache
        Type: S3
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
      TimeoutInMinutes: 10
      SourceVersion: !Ref GitHubBranch
      Source:
        BuildSpec: build/frontend.yml
        Type: CODEPIPELINE
      ServiceRole: !GetAtt BuildRole.Arn

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::Partition}/codebuild/*
              - Action:
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: '*'
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Sub ${ArtifactStore.Arn}/*
              - Action:
                  - iam:ListPolicies
                Effect: Allow
                Resource: '*'